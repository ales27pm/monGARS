{
  "version": 1,
  "roadmap": {
    "file": "ROADMAP.md"
  },
  "files": [
    {
      "path": "AGENTS.md",
      "title": "monGARS Delivery Charter",
      "scope": "Applies to every repository change. Nested AGENTS.md files add stricter rules; this root charter highlights the non-negotiable guardrails and shared context.",
      "dynamic_notes": [
        "Generated via `python scripts/manage_agents.py refresh`. Edit the JSON profile instead of the Markdown when updating scope or requirements.",
        "Run `python scripts/manage_agents.py create <directory>` to scaffold a scoped AGENTS.md when a new subsystem lands."
      ],
      "roadmap_focus": [
        {
          "phase": "Immediate Priorities (Security & Stability)",
          "label": "Security & Stability Hotlist"
        },
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (âœ… Completed Q4 2025)",
          "label": "Web/API Refinement"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Self-Improvement & Research"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability & Longevity"
        }
      ],
      "sections": [
        {
          "heading": "Workflow Guardrails",
          "bullets": [
            "Target **Python 3.11** for backend tooling and **Node.js 18+** for frontend builds.",
            "Format Python with `black` and `isort` (configured via `pyproject.toml`) and lint TypeScript/JavaScript assets with `npm run lint` before committing.",
            "Run `pytest` (631 tests, ~110s) and record skips; execute `npm run test` when web assets or SDKs change.",
            "Document architecture, configuration, and operator workflow changes in `docs/` or the README before shipping.",
            "Regenerate these instructions with `python scripts/manage_agents.py refresh` after editing `configs/agents/agents_config.json`."
          ]
        },
        {
          "heading": "Observability & Security",
          "bullets": [
            "Load configuration through `monGARS.config.get_settings()` so cached settings stay coherent across services.",
            "Redact secrets in logs and wire new background tasks into `monGARS.telemetry` counters and OpenTelemetry toggles (`otel_prometheus_enabled`, `otel_traces_enabled`).",
            "Keep Dockerfiles, Compose stacks, and Kubernetes manifests aligned; review Vault/ExternalSecret usage whenever credentials change."
          ]
        },
        {
          "heading": "Documentation & Runbooks",
          "bullets": [
            "Update runbooks, diagrams, and `monGARS_structure.txt` whenever module layout or workflows shift.",
            "Cross-link roadmap entries, docs, and code so operators can trace feature readiness and configuration changes."
          ]
        },
        {
          "heading": "Roadmap Integration",
          "paragraphs": [
            "Use the focus list below to link workstreams with the active roadmap. The script keeps this section current when the roadmap evolves."
          ]
        }
      ]
    },
    {
      "path": "monGARS/AGENTS.md",
      "title": "monGARS Package Contract",
      "scope": "Covers the primary FastAPI app, cognition services, persistence layer, and shared utilities.",
      "dynamic_notes": [
        "Auto-maintained via `scripts/manage_agents.py`."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 3 â€“ Hardware & Performance (âœ… Completed Q3 2025)",
          "label": "Runtime & Performance"
        },
        {
          "phase": "Phase 4 â€“ Collaborative Networking (âœ… Completed Q4 2025)",
          "label": "Networking & Collaboration"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Self-Improvement & Research"
        }
      ],
      "sections": [
        {
          "heading": "Dependency & Configuration Discipline",
          "bullets": [
            "Resolve configuration once with `monGARS.config.get_settings()` and pass dependencies into constructors or FastAPI dependency overrides instead of storing module-level state.",
            "Guard optional integrations (Ray Serve, Torch, MLflow, Ollama) with capability checks and fall back to deterministic adapters (`AdaptiveResponseGenerator`, linear manifest paths) when unavailable.",
            "Coordinate shared singletons like `ui_events.event_bus`, cache layers, and rate limiters through the central `monGARS.core` modules so API routes, workers, and background schedulers stay in sync."
          ]
        },
        {
          "heading": "Logging & Persistence",
          "bullets": [
            "Emit logs via `logging.getLogger(__name__)` with structured `extra` metadata; propagate correlation IDs surfaced by API and peer events.",
            "Route database access through `core.persistence.PersistenceRepository` and keep Alembic migrations in `alembic_migrations/` authoritative for schema changes.",
            "Use caching helpers in `core.caching` / `core.hippocampus` and ensure tests clear caches via fixtures to avoid state bleed."
          ]
        },
        {
          "heading": "Testing Map",
          "paragraphs": [
            "Update cognition, persistence, and networking suites togetherâ€”`tests/test_conversation_flow.py`, `tests/test_llm_integration.py`, `tests/test_peer_communication.py`, `tests/test_long_haul_validation.py`, `tests/test_sustainability_dashboard.py`, and `tests/test_research_long_haul_service.py` exercise this package."
          ]
        }
      ]
    },
    {
      "path": "monGARS/api/AGENTS.md",
      "title": "FastAPI Surface Standards",
      "scope": "Applies to routers, schemas, WebSocket helpers, and auth utilities under `monGARS/api/`.",
      "dynamic_notes": [
        "Refresh via the agents manager script to pick up roadmap changes or new endpoints."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (âœ… Completed Q4 2025)",
          "label": "API Refinement"
        }
      ],
      "sections": [
        {
          "heading": "Endpoint Design",
          "bullets": [
            "Expose asynchronous routes returning typed Pydantic responses; define request/response models in `schemas.py` and reuse dependency helpers from `dependencies.py`.",
            "Register routers with explicit prefixes/tags and share singletons (rate limiter, WebSocket manager, ticket signer) via module-level references to avoid reinitialisation races."
          ]
        },
        {
          "heading": "Security, Tickets & Rate Limiting",
          "bullets": [
            "Authenticate through `core.security.SecurityManager`/`authenticate_user` and guard chat endpoints with `InMemoryRateLimiter` while logging rejects via `_log_rate_limit`.",
            "Issue and verify WebSocket tickets using `ws_ticket.py`/`ticket_signer.py`; ensure `ws_manager` respects queue sizes and token-bucket settings from configuration.",
            "Translate domain failures into FastAPI `HTTPException`s and capture upstream errors (`HTTPError`, `SQLAlchemyError`, `CircuitBreakerOpenError`) before re-raising."
          ]
        },
        {
          "heading": "Observability & Static Assets",
          "bullets": [
            "Expose `/metrics` via `PROMETHEUS_REGISTRY` and enable OpenTelemetry instrumentation only when `_settings.otel_*` toggles demand it.",
            "Serve static assets through `StaticFiles` when the build output exists; log actionable warnings when assets are missing during development builds."
          ]
        },
        {
          "heading": "Testing Hooks",
          "paragraphs": [
            "Keep `tests/test_api_chat.py`, `tests/test_api_history.py`, `tests/test_api_model_management.py`, `tests/test_api_rag.py`, `tests/test_ticket_signer.py`, `tests/test_websocket.py`, and `tests/test_ws_manager.py` aligned when contracts evolve."
          ]
        }
      ]
    },
    {
      "path": "monGARS/core/AGENTS.md",
      "title": "Cognition Engine Protocol",
      "scope": "Guides orchestrators, schedulers, and memory abstractions under `monGARS/core/`.",
      "dynamic_notes": [
        "Sourced from the central JSON profile; run the refresh command after substantial engine work."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 3 â€“ Hardware & Performance (âœ… Completed Q3 2025)",
          "label": "Performance & Resilience"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Self-Improvement"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability"
        }
      ],
      "sections": [
        {
          "heading": "Architectural Principles",
          "bullets": [
            "Keep orchestrators asynchronous, inject collaborators explicitly, and favour existing services (`AdaptiveResponseGenerator`, `ConversationalModule`, `PeerCommunicator`, `LongHaulValidation`) over ad-hoc state machines.",
            "Route UI events through `ui_events.event_bus`, persist approvals via `operator_approvals`, and coordinate sustainability metrics with `sustainability_dashboard` when adding new workflows."
          ]
        },
        {
          "heading": "Operational Discipline",
          "bullets": [
            "Offload blocking work with `asyncio.to_thread` or executors and avoid sharing mutable globals across tasks.",
            "Emit metrics through `monGARS.telemetry`/OpenTelemetry where available and prefer timezone-aware timestamps (`datetime.now(datetime.UTC)`) in new code.",
            "Handle optional ML dependencies defensively with explicit fallbacks and structured warnings."
          ]
        },
        {
          "heading": "Test Coverage",
          "paragraphs": [
            "Expand cognition, reinforcement, and sustainability suites when behaviour shiftsâ€”`tests/test_conversation_semantic_context.py`, `tests/test_llm_integration.py`, `tests/test_peer_communication.py`, `tests/test_reinforcement_loop.py`, `tests/test_long_haul_validation.py`, and `tests/test_sustainability_dashboard.py` anchor this area."
          ]
        }
      ]
    },
    {
      "path": "modules/AGENTS.md",
      "title": "Optional Modules Charter",
      "scope": "Covers optional subsystems under `modules/`, including evolution and neuron trainers.",
      "dynamic_notes": [
        "Generated from the shared JSON profile; use the manager script to refresh."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Self-Improvement Focus"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability Research"
        }
      ],
      "sections": [
        {
          "heading": "Design Tenets",
          "bullets": [
            "Gate heavy dependencies (Torch, datasets, GPU tooling) behind runtime checks with informative warnings and deterministic fallbacks.",
            "Accept configuration via explicit parameters or config bundles from `configs/` and surface artefact metadata for the catalog.",
            "Log with contextual metadata (model, dataset, artefact path) using `logging.getLogger(__name__)` and feed sustainability metrics when available."
          ]
        },
        {
          "heading": "Documentation & Testing",
          "bullets": [
            "Add scoped AGENTS.md files for new subpackages and update `monGARS_structure.txt` when landing modules.",
            "Keep `tests/test_evolution_engine.py`, `tests/test_training_pipeline.py`, `tests/test_mntp_trainer.py`, `tests/test_run_dolphin_unsloth_workflow.py`, and `tests/test_mlops_training.py` current as features evolve; patch heavy integrations for speed."
          ]
        }
      ]
    },
    {
      "path": "modules/evolution_engine/AGENTS.md",
      "title": "Evolution Engine Playbook",
      "scope": "Defines how retraining orchestration and self-healing pipelines behave under `modules/evolution_engine/`.",
      "dynamic_notes": [
        "Managed by the global agents script."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Self-Training Execution"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability Coordination"
        }
      ],
      "sections": [
        {
          "heading": "Pipeline Discipline",
          "bullets": [
            "Keep `EvolutionOrchestrator` focused on sequencing; instantiate trainers from `modules.neurons.training` and return artefact metadata for catalog updates.",
            "Represent pipeline stages with explicit methods for validation, training, deployment, rollback, and sustainability checks.",
            "Wrap external calls with targeted exception handlingâ€”log the action, include artefact identifiers, and propagate unexpected errors."
          ]
        },
        {
          "heading": "Configuration",
          "bullets": [
            "Default to configs in `configs/training/` (`mntp_dolphin_config.json`, sustainability policies) with constructor overrides for deterministic tests.",
            "Document config changes in the README/docs and roadmap when defaults move or new sustainability gates are added."
          ]
        },
        {
          "heading": "Validation",
          "paragraphs": [
            "Extend `tests/test_evolution_engine.py`, `tests/test_sustainability_policy.py`, and long-haul integration tests to cover success, failure, artefact validation, and sustainability gate scenarios. Use fakes for `MNTPTrainer` in unit tests."
          ]
        }
      ]
    },
    {
      "path": "modules/neurons/AGENTS.md",
      "title": "Neuron Trainer Guidelines",
      "scope": "Applies to neuron trainers and utilities under `modules/neurons/`.",
      "dynamic_notes": [
        "Auto-updated via the agents manager script."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Training Cadence"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability Hooks"
        }
      ],
      "sections": [
        {
          "heading": "Runtime Expectations",
          "bullets": [
            "Import heavy ML frameworks lazily; fall back gracefully when dependencies are missing and document deterministic adapter paths.",
            "Accept explicit arguments for output directories, manifests, approvals, and config paths so orchestration remains testable.",
            "Persist artefacts with helper methods (e.g., `_save_config`, `_save_placeholder`) and document layouts in docstrings for catalog consumers."
          ]
        },
        {
          "heading": "Telemetry & Tests",
          "bullets": [
            "Stream progress logs with model, dataset, loss, and sustainability context; emit metrics when long-running jobs are introduced.",
            "Keep `tests/test_mntp_trainer.py`, `tests/test_reinforcement_loop.py`, and `tests/test_training_pipeline.py` up to date and constrain property-based tests for speed."
          ]
        }
      ]
    },
    {
      "path": "webapp/AGENTS.md",
      "title": "Django Webapp Guardrails",
      "scope": "Applies to the Django project in `webapp/`, covering async views, services, templates, and middleware.",
      "dynamic_notes": [
        "Refresh via the agents manager script to sync with roadmap and API contracts."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (âœ… Completed Q4 2025)",
          "label": "Web Interface Goals"
        }
      ],
      "sections": [
        {
          "heading": "Views & Services",
          "bullets": [
            "Keep views asynchronous and delegate outbound HTTP calls to `chat/services.py` for centralised auth, retries, logging, and WebSocket ticket exchange.",
            "Pull configuration from environment variables/Django settings; never hardcode secrets or URLs and keep parity with FastAPI settings.",
            "Apply `require_token` to authenticated routes and document context variables in docstrings."
          ]
        },
        {
          "heading": "Templates & Frontend",
          "bullets": [
            "Keep business logic in views/services; templates focus on presentation with progressive enhancement and localisation-ready strings.",
            "Ensure JavaScript bundles built via `webapp/static/js/build.mjs` have graceful degradation paths; run `npm run lint`/`npm run test` when editing them."
          ]
        },
        {
          "heading": "Testing",
          "paragraphs": [
            "Update `tests/test_webapp_chat_services.py`, `tests/test_webapp_settings.py`, `tests/test_webapp_database_settings.py`, and `tests/test_websocket.py` when UI flows change; mock FastAPI interactions with `respx`/`httpx`."
          ]
        }
      ]
    },
    {
      "path": "webapp/chat/AGENTS.md",
      "title": "Chat Interface Standards",
      "scope": "Covers views, services, forms, and templates for `webapp/chat/`.",
      "dynamic_notes": [
        "Managed through the central JSON profile."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (âœ… Completed Q4 2025)",
          "label": "Chat UX Alignment"
        }
      ],
      "sections": [
        {
          "heading": "Architecture",
          "bullets": [
            "Route logic through `services.py` and wrap protected views with `require_token`; reuse async clients for history, chat, and ticket exchange.",
            "Mirror payloads defined in `monGARS.api.web_api.ChatRequest` and related schemas; document new context variables in docstrings/templates."
          ]
        },
        {
          "heading": "Networking & Error Handling",
          "bullets": [
            "Centralise HTTP calls in `services.py` to reuse retries, error handling, structured logging, and token refresh logic.",
            "Surface actionable operator errors for network issues and capture exceptions with context for downstream telemetry."
          ]
        },
        {
          "heading": "Verification",
          "paragraphs": [
            "Revise `tests/test_webapp_chat_services.py`, `tests/test_websocket.py`, and end-to-end suites alongside chat changes; rely on async clients or httpx mocks."
          ]
        }
      ]
    },
    {
      "path": "tests/AGENTS.md",
      "title": "Test Suite Expectations",
      "scope": "Applies to everything in `tests/`, including async fixtures, integration checks, and long-running suites.",
      "dynamic_notes": [
        "Auto-generated; run the refresh command after adding new suites or fixtures."
      ],
      "roadmap_focus": [
        {
          "phase": "Immediate Priorities (Security & Stability)",
          "label": "Stability Assurance"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (âœ… Completed Q1 2026)",
          "label": "Research Coverage"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability Validation"
        }
      ],
      "sections": [
        {
          "heading": "Structure & Conventions",
          "bullets": [
            "Annotate async tests with `pytest.mark.asyncio` and lean on fixtures in `conftest.py`; never create event loops manually.",
            "Reset shared state (hippocampus caches, global singletons) in fixtures to keep tests hermetic.",
            "Stub heavy dependencies (Torch, spaCy, HTTP clients) with fakes or patches to keep runs deterministic."
          ]
        },
        {
          "heading": "Coverage Expectations",
          "bullets": [
            "Exercise success and failure paths for HTTP endpoints, WebSockets, orchestration flows, sustainability gates, and SDK tooling.",
            "Run `chaos_test.py`, `integration_test.py`, `self_training_test.py`, and reinforcement long-haul suites before releases or infrastructure-heavy changes.",
            "Constrain property-based tests to stay fast and deterministic; document skipped suites in PR notes."
          ]
        },
        {
          "heading": "Tooling",
          "paragraphs": [
            "Default command is `pytest`; run from the repository root so module paths resolve (631 tests currently pass in ~110 seconds). Use `pytest -k <pattern>` for focused runs, `pytest --maxfail=1` for triage, and `pytest --cov=monGARS --cov=modules` when coverage is required.",
            "Invoke `npm run test` when frontend/TypeScript assets change so lint and Jest suites stay green."
          ]
        }
      ]
    },
    {
      "path": "docs/AGENTS.md",
      "title": "Documentation Authoring Guide",
      "scope": "Covers runbooks, API references, and architectural notes under `docs/`.",
      "dynamic_notes": [
        "Generated via the agents manager script; edit the JSON profile and refresh after updating guidance."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (âœ… Completed Q4 2025)",
          "label": "Operator Documentation"
        },
        {
          "phase": "Phase 7 â€“ Sustainability & Longevity (ðŸŒ± Future)",
          "label": "Sustainability Runbooks"
        }
      ],
      "sections": [
        {
          "heading": "Style & Accuracy",
          "bullets": [
            "Write in present tense, reference canonical module paths/tests, and refresh `Last updated` stamps when present.",
            "Include direct links to source files or diagrams so readers can jump to implementations quickly."
          ]
        },
        {
          "heading": "Maintenance",
          "bullets": [
            "Update metrics, counts, and configuration tables when behaviour changes (e.g., test totals in `docs/testing.md`, deployment ports, feature flags).",
            "Document new configuration keys, sustainability controls, or operator workflows before declaring roadmap items complete."
          ]
        },
        {
          "heading": "Cross-Linking",
          "paragraphs": [
            "Cross-reference roadmap milestones and other docs when closing loops so contributors understand how features land across API, core, modules, and webapp layers."
          ]
        }
      ]
    }
  ]
}
