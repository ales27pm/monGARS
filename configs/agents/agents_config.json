{
  "version": 1,
  "roadmap": {
    "file": "ROADMAP.md"
  },
  "files": [
    {
      "path": "AGENTS.md",
      "title": "monGARS Delivery Charter",
      "scope": "Applies to every repository change. Nested AGENTS.md files add stricter rules; this root charter highlights the non-negotiable guardrails and shared context.",
      "dynamic_notes": [
        "Generated via `python scripts/manage_agents.py refresh`. Edit the JSON profile instead of the Markdown when updating scope or requirements.",
        "Run `python scripts/manage_agents.py create <directory>` to scaffold a scoped AGENTS.md when a new subsystem lands."
      ],
      "roadmap_focus": [
        {
          "phase": "Immediate Priorities (Security & Stability)",
          "label": "Security & Stability Hotlist"
        },
        {
          "phase": "Phase 3 â€“ Hardware & Performance (ðŸ”„ In Progress, Target Q3 2025)",
          "label": "Phase 3 â€“ Hardware & Performance"
        },
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (ðŸ—“ Target Q1 2026)",
          "label": "Phase 5 â€“ Web/API Refinement"
        }
      ],
      "sections": [
        {
          "heading": "Workflow Guardrails",
          "bullets": [
            "Target **Python 3.11** across tooling and CI.",
            "Format with `black` and `isort` using the repository `pyproject.toml` configuration.",
            "Run `pytest -q` before raising a pull request; record skipped suites and why.",
            "Document architecture, configuration, and operator workflows in `docs/` or the README when behaviour changes."
          ]
        },
        {
          "heading": "Observability & Security",
          "bullets": [
            "Load configuration through `monGARS.config.get_settings()` so cached settings stay coherent across services.",
            "Redact secrets in logs and surface metrics via OpenTelemetry when you introduce background workers or retries.",
            "Keep Dockerfiles, build scripts, and Kubernetes manifests alignedâ€”when you touch one, review the others."
          ]
        },
        {
          "heading": "Roadmap Integration",
          "paragraphs": [
            "Use the focus list below to link workstreams with the active roadmap. The script keeps this section current when the roadmap evolves."
          ]
        }
      ]
    },
    {
      "path": "monGARS/AGENTS.md",
      "title": "monGARS Package Contract",
      "scope": "Covers the primary FastAPI app, cognition services, persistence layer, and shared utilities.",
      "dynamic_notes": [
        "Auto-maintained via `scripts/manage_agents.py`."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 3 â€“ Hardware & Performance (ðŸ”„ In Progress, Target Q3 2025)",
          "label": "Runtime & Performance"
        },
        {
          "phase": "Phase 4 â€“ Collaborative Networking (ðŸ”„ In Progress, Target Q4 2025)",
          "label": "Networking & Collaboration"
        }
      ],
      "sections": [
        {
          "heading": "Dependency & Configuration Discipline",
          "bullets": [
            "Resolve configuration once with `monGARS.config.get_settings()` and inject dependencies via constructors or FastAPI dependency providers.",
            "Guard optional ML/serving libraries with availability checks and deliver graceful fallbacks with structured warnings."
          ]
        },
        {
          "heading": "Logging & Persistence",
          "bullets": [
            "Emit logs via `logging.getLogger(__name__)` with scrubbed identifiers.",
            "Route database access through `core.persistence.PersistenceRepository` and align schemas with Alembic migrations in `alembic/`.",
            "Prefer caching helpers in `core.caching` / `core.hippocampus` and clear them explicitly inside tests."
          ]
        },
        {
          "heading": "Testing Map",
          "paragraphs": [
            "Update cognition and API suites together; relevant modules drive `tests/test_api_*.py`, `tests/test_hippocampus.py`, and peers listed in the roadmap snapshot."
          ]
        }
      ]
    },
    {
      "path": "monGARS/api/AGENTS.md",
      "title": "FastAPI Surface Standards",
      "scope": "Applies to routers, schemas, WebSocket helpers, and auth utilities under `monGARS/api/`.",
      "dynamic_notes": [
        "Refresh via the agents manager script to pick up roadmap changes or new endpoints."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (ðŸ—“ Target Q1 2026)",
          "label": "API Refinement"
        }
      ],
      "sections": [
        {
          "heading": "Endpoint Design",
          "bullets": [
            "Expose asynchronous routes returning typed Pydantic responses; centralise validation inside `schemas.py`.",
            "Register shared dependencies inside `dependencies.py` so tests can inject doubles."
          ]
        },
        {
          "heading": "Security & Error Handling",
          "bullets": [
            "Flow authentication through `core.security.SecurityManager` and enforce bearer tokens on every route except `/ready` and `/healthz`.",
            "Translate domain errors into `HTTPException` codes; log unexpected failures with correlation IDs before bubbling up."
          ]
        },
        {
          "heading": "Testing Hooks",
          "paragraphs": [
            "Keep `tests/test_api_chat.py`, `tests/test_api_history.py`, and WebSocket suites aligned when request/response contracts evolve."
          ]
        }
      ]
    },
    {
      "path": "monGARS/core/AGENTS.md",
      "title": "Cognition Engine Protocol",
      "scope": "Guides orchestrators, schedulers, and memory abstractions under `monGARS/core/`.",
      "dynamic_notes": [
        "Sourced from the central JSON profile; run the refresh command after substantial engine work."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 3 â€“ Hardware & Performance (ðŸ”„ In Progress, Target Q3 2025)",
          "label": "Performance & Resilience"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (ðŸ—“ Target Q2 2026)",
          "label": "Self-Improvement"
        }
      ],
      "sections": [
        {
          "heading": "Architectural Principles",
          "bullets": [
            "Keep orchestrators thin and asynchronous; inject collaborators and avoid module-level singletons.",
            "Prefer existing services (`Hippocampus`, `PersistenceRepository`, `DistributedScheduler`, `PeerCommunicator`) before inventing new state machines.",
            "Document new behaviours and heuristics in module docstrings."
          ]
        },
        {
          "heading": "Operational Discipline",
          "bullets": [
            "Wrap blocking work with `asyncio.to_thread` or queue it on executors.",
            "Publish counters/metrics for long-running loops and redact sensitive identifiers in logs.",
            "Handle optional ML dependencies defensively with explicit fallbacks."
          ]
        },
        {
          "heading": "Test Coverage",
          "paragraphs": [
            "Expand cognition suites when behaviour shiftsâ€”`tests/test_hippocampus.py`, `tests/test_personality.py`, `tests/test_mimicry.py`, and scheduler/evolution tests anchor this area."
          ]
        }
      ]
    },
    {
      "path": "modules/AGENTS.md",
      "title": "Optional Modules Charter",
      "scope": "Covers optional subsystems under `modules/`, including evolution and neuron trainers.",
      "dynamic_notes": [
        "Generated from the shared JSON profile; use the manager script to refresh."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (ðŸ—“ Target Q2 2026)",
          "label": "Self-Improvement Focus"
        }
      ],
      "sections": [
        {
          "heading": "Design Tenets",
          "bullets": [
            "Gate heavy dependencies (Torch, datasets, GPU tooling) behind runtime checks with informative warnings.",
            "Accept configuration via explicit parameters or config bundles from `configs/`.",
            "Log with contextual metadata (model, dataset, artefact path) using `logging.getLogger(__name__)`."
          ]
        },
        {
          "heading": "Documentation & Testing",
          "bullets": [
            "Add scoped AGENTS.md files for new subpackages and update `monGARS_structure.txt`.",
            "Keep `tests/test_evolution_engine.py` and `tests/test_mntp_trainer.py` current as features evolve; patch heavy integrations for speed."
          ]
        }
      ]
    },
    {
      "path": "modules/evolution_engine/AGENTS.md",
      "title": "Evolution Engine Playbook",
      "scope": "Defines how retraining orchestration and self-healing pipelines behave under `modules/evolution_engine/`.",
      "dynamic_notes": [
        "Managed by the global agents script."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (ðŸ—“ Target Q2 2026)",
          "label": "Self-Training Execution"
        }
      ],
      "sections": [
        {
          "heading": "Pipeline Discipline",
          "bullets": [
            "Keep `EvolutionOrchestrator` focused on sequencing; instantiate trainers from `modules.neurons.training` and return artefact metadata.",
            "Represent pipeline stages with explicit methods for validation, training, deployment, and rollback.",
            "Wrap external calls with targeted exception handlingâ€”log the action and propagate unexpected errors."
          ]
        },
        {
          "heading": "Configuration",
          "bullets": [
            "Default to `configs/training/mntp_mistral_config.json` with constructor overrides for deterministic tests.",
            "Document config changes in the README and roadmap when defaults move."
          ]
        },
        {
          "heading": "Validation",
          "paragraphs": [
            "Extend `tests/test_evolution_engine.py` to cover success, failure, and artefact validation scenarios. Use fakes for `MNTPTrainer` in unit tests."
          ]
        }
      ]
    },
    {
      "path": "modules/neurons/AGENTS.md",
      "title": "Neuron Trainer Guidelines",
      "scope": "Applies to neuron trainers and utilities under `modules/neurons/`.",
      "dynamic_notes": [
        "Auto-updated via the agents manager script."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (ðŸ—“ Target Q2 2026)",
          "label": "Training Cadence"
        }
      ],
      "sections": [
        {
          "heading": "Runtime Expectations",
          "bullets": [
            "Import heavy ML frameworks lazily; fall back gracefully when dependencies are missing.",
            "Accept explicit arguments for output directories, manifests, and config paths to keep orchestration testable.",
            "Persist artefacts with helper methods (e.g., `_save_config`, `_save_placeholder`) and document layouts in docstrings."
          ]
        },
        {
          "heading": "Telemetry & Tests",
          "bullets": [
            "Stream progress logs with model, dataset, and loss context; emit metrics when long-running jobs are introduced.",
            "Keep `tests/test_mntp_trainer.py` up to date and constrain property-based tests for speed."
          ]
        }
      ]
    },
    {
      "path": "webapp/AGENTS.md",
      "title": "Django Webapp Guardrails",
      "scope": "Applies to the Django project in `webapp/`, covering async views, services, templates, and middleware.",
      "dynamic_notes": [
        "Refresh via the agents manager script to sync with roadmap and API contracts."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (ðŸ—“ Target Q1 2026)",
          "label": "Web Interface Goals"
        }
      ],
      "sections": [
        {
          "heading": "Views & Services",
          "bullets": [
            "Keep views asynchronous and delegate outbound HTTP calls to `chat/services.py` for centralised auth, retries, and logging.",
            "Pull configuration from environment variables/Django settings; never hardcode secrets or URLs.",
            "Apply `require_token` to authenticated routes and document context variables in docstrings."
          ]
        },
        {
          "heading": "Templates & Frontend",
          "bullets": [
            "Keep business logic in views/services; templates focus on presentation with progressive enhancement.",
            "Ensure JavaScript has graceful degradation paths and document new data attributes/events."
          ]
        },
        {
          "heading": "Testing",
          "paragraphs": [
            "Update `tests/test_api_history.py` and `tests/test_websocket.py` when UI flows change; mock FastAPI interactions with `respx`/`httpx`."
          ]
        }
      ]
    },
    {
      "path": "webapp/chat/AGENTS.md",
      "title": "Chat Interface Standards",
      "scope": "Covers views, services, forms, and templates for `webapp/chat/`.",
      "dynamic_notes": [
        "Managed through the central JSON profile."
      ],
      "roadmap_focus": [
        {
          "phase": "Phase 5 â€“ Web Interface & API Refinement (ðŸ—“ Target Q1 2026)",
          "label": "Chat UX Alignment"
        }
      ],
      "sections": [
        {
          "heading": "Architecture",
          "bullets": [
            "Route logic through `services.py` and wrap protected views with `require_token`.",
            "Mirror payloads defined in `monGARS.api.web_api.ChatRequest`; document new context variables in docstrings/templates."
          ]
        },
        {
          "heading": "Networking & Error Handling",
          "bullets": [
            "Centralise HTTP calls in `services.py` to reuse retries, error handling, and logging.",
            "Surface actionable operator errors for network issues and capture exceptions with context."
          ]
        },
        {
          "heading": "Verification",
          "paragraphs": [
            "Revise `tests/test_api_history.py` and `tests/test_websocket.py` alongside chat changes; rely on async clients or httpx mocks."
          ]
        }
      ]
    },
    {
      "path": "tests/AGENTS.md",
      "title": "Test Suite Expectations",
      "scope": "Applies to everything in `tests/`, including async fixtures, integration checks, and long-running suites.",
      "dynamic_notes": [
        "Auto-generated; run the refresh command after adding new suites or fixtures."
      ],
      "roadmap_focus": [
        {
          "phase": "Immediate Priorities (Security & Stability)",
          "label": "Stability Assurance"
        },
        {
          "phase": "Phase 6 â€“ Self-Improvement & Research (ðŸ—“ Target Q2 2026)",
          "label": "Research Coverage"
        }
      ],
      "sections": [
        {
          "heading": "Structure & Conventions",
          "bullets": [
            "Annotate async tests with `pytest.mark.asyncio` and lean on fixtures in `conftest.py`; never create event loops manually.",
            "Reset shared state (hippocampus caches, global singletons) in fixtures to keep tests hermetic.",
            "Stub heavy dependencies (Torch, spaCy, HTTP clients) with fakes or patches."
          ]
        },
        {
          "heading": "Coverage Expectations",
          "bullets": [
            "Exercise success and failure paths for HTTP endpoints, WebSockets, and orchestration flows.",
            "Run `chaos_test.py`, `integration_test.py`, and `self_training_test.py` before releases or infrastructure-heavy changes.",
            "Constrain property-based tests to stay fast and deterministic."
          ]
        },
        {
          "heading": "Tooling",
          "paragraphs": [
            "Default command is `pytest -q`; use `pytest -k <pattern>` for focused runs and `pytest --maxfail=1` for triage. Generate coverage with `pytest --cov=monGARS --cov=modules` when requested."
          ]
        }
      ]
    }
  ]
}
