import streamlit as st
import requests
import os
import logging
import subprocess
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Configure logging
logging.basicConfig(
    filename="logs/app.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console_handler.setFormatter(console_formatter)
logging.getLogger().addHandler(console_handler)

BACKEND_URL = "http://localhost:8081"

# Configure retry strategy
retry_strategy = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["HEAD", "GET", "OPTIONS", "POST"],
    raise_on_status=False,
    raise_on_redirect=False
)
adapter = HTTPAdapter(max_retries=retry_strategy)
http = requests.Session()
http.mount("http://", adapter)
http.mount("https://", adapter)

def check_backend_status():
    try:
        response = http.get(f"{BACKEND_URL}/status")
        if response.status_code == 200:
            logging.info("Backend status: actif")
            return True
        else:
            logging.warning(f"Backend status: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        logging.error(f"Erreur de connexion : {e}")
        return False

def start_backend():
    try:
        subprocess.run(["python", "main.py"], check=True)
        logging.info("Backend started successfully.")
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to start backend: {e}")
        st.error("Failed to start backend. Please check the logs for more details.")

st.title("monGARS - Interface Web")

# Section : V√©rification du statut du serveur
st.header("‚öôÔ∏è Statut du serveur")
if st.button("V√©rifier le statut du backend"):
    if check_backend_status():
        st.success("Le serveur backend est actif.")
    else:
        st.warning("Le serveur backend n'est pas actif. Tentative de d√©marrage du backend...")
        start_backend()
        if check_backend_status():
            st.success("Le serveur backend est maintenant actif.")
        else:
            st.error("Le serveur backend n'a pas pu √™tre d√©marr√©.")

# Section 1 : Chat avec Bouche
st.header("üí¨ Chat avec Bouche")
query = st.text_input("Posez votre question :", key="query_input")
if st.button("Envoyer"):
    if check_backend_status():
        with st.spinner("Bouche r√©fl√©chit..."):
            try:
                response = http.post(f"{BACKEND_URL}/bouche/respond", json={"query": query}, timeout=10)
                st.success("R√©ponse de Bouche :")
                st.write(response.json().get("response", "Aucune r√©ponse trouv√©e."))
                logging.info(f"Query: {query}, Response: {response.json().get('response', 'Aucune r√©ponse trouv√©e.')}")
            except requests.exceptions.Timeout:
                st.error("La requ√™te a pris trop de temps. Veuillez r√©essayer plus tard.")
                logging.error("La requ√™te a pris trop de temps.")
            except requests.exceptions.RequestException as e:
                st.error(f"Erreur de connexion : {e}")
                logging.error(f"Erreur de connexion : {e}")
            except Exception as e:
                st.error(f"Erreur : {e}")
                logging.error(f"Erreur : {e}")
    else:
        st.warning("Le serveur backend n'est pas actif. Veuillez v√©rifier le statut du serveur.")

# Section 2 : R√©cup√©rer une m√©moire depuis Hippocampus
st.header("üß† R√©cup√©rer une m√©moire (Hippocampus)")
memory_query = st.text_input("Rechercher dans la m√©moire :", key="memory_query")
if st.button("R√©cup√©rer M√©moire"):
    if check_backend_status():
        with st.spinner("Recherche dans Hippocampus..."):
            try:
                response = http.post(f"{BACKEND_URL}/hippocampus/retrieve_memory", json={"query": memory_query})
                st.success("M√©moire trouv√©e :")
                st.write(response.json().get("response", "Aucune m√©moire correspondante."))
                logging.info(f"Memory query: {memory_query}, Response: {response.json().get('response', 'Aucune m√©moire correspondante.')}")
            except requests.exceptions.RequestException as e:
                st.error(f"Erreur de connexion : {e}")
                logging.error(f"Erreur de connexion : {e}")
            except Exception as e:
                st.error(f"Erreur : {e}")
                logging.error(f"Erreur : {e}")
    else:
        st.warning("Le serveur backend n'est pas actif. Veuillez v√©rifier le statut du serveur.")

# Section 3 : Ajouter une t√¢che dans Cortex
st.header("üìù Ajouter une t√¢che (Cortex)")
task_name = st.text_input("Nom de la t√¢che :", key="task_name")
priority = st.slider("Priorit√© de la t√¢che :", 1, 10, 5, key="task_priority")
if st.button("Ajouter T√¢che"):
    if check_backend_status():
        with st.spinner("Ajout de la t√¢che dans Cortex..."):
            try:
                response = http.post(f"{BACKEND_URL}/cortex/add_task", json={"task": task_name, "priority": priority})
                st.success(response.json().get("status", "T√¢che ajout√©e avec succ√®s."))
                logging.info(f"Task: {task_name}, Priority: {priority}, Status: {response.json().get('status', 'T√¢che ajout√©e avec succ√®s.')}")
            except requests.exceptions.RequestException as e:
                st.error(f"Erreur de connexion : {e}")
                logging.error(f"Erreur de connexion : {e}")
            except Exception as e:
                st.error(f"Erreur : {e}")
                logging.error(f"Erreur : {e}")
    else:
        st.warning("Le serveur backend n'est pas actif. Veuillez v√©rifier le statut du serveur.")

# Section 4 : Gestion des documents
st.header("üìÇ Upload et traitement de documents")
uploaded_file = st.file_uploader("Choisissez un fichier (texte, PDF ou Word)", type=["txt", "pdf", "docx"])
if uploaded_file is not None:
    if check_backend_status():
        with st.spinner("Traitement du fichier..."):
            try:
                # Sauvegarde temporaire
                file_path = os.path.join("uploads", uploaded_file.name)
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Envoi √† l'API pour traitement
                with open(file_path, "rb") as f:
                    response = http.post(f"{BACKEND_URL}/documents/upload", files={"file": f})
                
                st.success("Fichier trait√© avec succ√®s‚ÄØ!")
                st.write(response.text)
                logging.info(f"Uploaded file: {uploaded_file.name}, Response: {response.text}")

                # Aper√ßu du contenu extrait
                st.subheader("Aper√ßu des donn√©es extraites :")
                if uploaded_file.name.endswith(".txt"):
                    st.text(uploaded_file.getvalue().decode("utf-8")[:500])  # 500 premiers caract√®res
                elif uploaded_file.name.endswith(".pdf"):
                    st.text("Le contenu extrait du PDF sera affich√© ici apr√®s traitement.")
                elif uploaded_file.name.endswith(".docx"):
                    st.text("Le contenu extrait du document Word sera affich√© ici apr√®s traitement.")
            except requests.exceptions.RequestException as e:
                st.error(f"Erreur de connexion : {e}")
                logging.error(f"Erreur de connexion : {e}")
            except Exception as e:
                st.error(f"Erreur lors du traitement du fichier : {e}")
                logging.error(f"Erreur lors du traitement du fichier : {e}")
    else:
        st.warning("Le serveur backend n'est pas actif. Veuillez v√©rifier le statut du serveur.")
