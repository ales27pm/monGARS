{
  "openapi": "3.1.0",
  "info": {
    "title": "monGARS API",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/ui/suggestions": {
      "post": {
        "tags": [
          "ui"
        ],
        "summary": "Suggestions",
        "operationId": "suggestions_api_v1_ui_suggestions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/models": {
      "get": {
        "tags": [
          "models"
        ],
        "summary": "Read Model Configuration",
        "description": "Return the active profile and available model definitions.",
        "operationId": "read_model_configuration_api_v1_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMModelConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/models/provision": {
      "post": {
        "tags": [
          "models"
        ],
        "summary": "Provision Models",
        "description": "Ensure local providers have the configured models for the requested roles.",
        "operationId": "provision_models_api_v1_models_provision_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMModelProvisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LLMModelProvisionReportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/auth/ws/ticket": {
      "post": {
        "tags": [
          "ws-ticket"
        ],
        "summary": "Issue Ws Ticket",
        "operationId": "issue_ws_ticket_api_v1_auth_ws_ticket_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WSTicketResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/review/rag-context": {
      "post": {
        "tags": [
          "review"
        ],
        "summary": "Fetch Rag Context",
        "description": "Return contextual code references relevant to the supplied query.",
        "operationId": "fetch_rag_context_api_v1_review_rag_context_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RagContextRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RagContextResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/token": {
      "post": {
        "summary": "Login",
        "description": "Return a simple access token.",
        "operationId": "login_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Login Token Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/register": {
      "post": {
        "summary": "Register User",
        "operationId": "register_user_api_v1_user_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Register User Api V1 User Register Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "summary": "Healthz",
        "operationId": "healthz_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Healthz Healthz Get"
                }
              }
            }
          }
        }
      }
    },
    "/ready": {
      "get": {
        "summary": "Ready",
        "operationId": "ready_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Ready Ready Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/history": {
      "get": {
        "summary": "Conversation History",
        "operationId": "conversation_history_api_v1_conversation_history_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemoryItem"
                  },
                  "title": "Response Conversation History Api V1 Conversation History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/conversation/chat": {
      "post": {
        "summary": "Chat",
        "operationId": "chat_api_v1_conversation_chat_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/message": {
      "post": {
        "summary": "Peer Message",
        "description": "Receive an encrypted message from a peer.",
        "operationId": "peer_message_api_v1_peer_message_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeerMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Peer Message Api V1 Peer Message Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/register": {
      "post": {
        "summary": "Peer Register",
        "description": "Register a peer URL for future broadcasts.",
        "operationId": "peer_register_api_v1_peer_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeerRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Peer Register Api V1 Peer Register Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/unregister": {
      "post": {
        "summary": "Peer Unregister",
        "description": "Remove a previously registered peer URL.",
        "operationId": "peer_unregister_api_v1_peer_unregister_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeerRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Peer Unregister Api V1 Peer Unregister Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/list": {
      "get": {
        "summary": "Peer List",
        "description": "Return the list of registered peer URLs.",
        "operationId": "peer_list_api_v1_peer_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response Peer List Api V1 Peer List Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/load": {
      "get": {
        "summary": "Peer Load",
        "description": "Expose this node's scheduler load metrics to peers.",
        "operationId": "peer_load_api_v1_peer_load_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeerLoadSnapshot"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v1/peer/telemetry": {
      "get": {
        "summary": "Peer Telemetry Snapshot",
        "description": "Return cached telemetry for local and remote schedulers.",
        "operationId": "peer_telemetry_snapshot_api_v1_peer_telemetry_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeerTelemetryEnvelope"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "summary": "Peer Telemetry Ingest",
        "description": "Accept telemetry published by peer schedulers.",
        "operationId": "peer_telemetry_ingest_api_v1_peer_telemetry_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeerTelemetryPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Peer Telemetry Ingest Api V1 Peer Telemetry Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_token_post"
      },
      "ChatRequest": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 1000,
            "minLength": 1,
            "title": "Message"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatRequest",
        "description": "Incoming chat message sent to the conversational endpoint."
      },
      "ChatResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response"
          },
          "confidence": {
            "type": "number",
            "title": "Confidence"
          },
          "processing_time": {
            "type": "number",
            "title": "Processing Time"
          },
          "speech_turn": {
            "$ref": "#/components/schemas/SpeechTurnSchema"
          }
        },
        "type": "object",
        "required": [
          "response",
          "confidence",
          "processing_time",
          "speech_turn"
        ],
        "title": "ChatResponse",
        "description": "Canonical response body returned by the chat endpoint."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LLMModelConfigurationResponse": {
        "properties": {
          "active_profile": {
            "type": "string",
            "title": "Active Profile"
          },
          "available_profiles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Profiles"
          },
          "profile": {
            "$ref": "#/components/schemas/LLMModelProfileSummary"
          }
        },
        "type": "object",
        "required": [
          "active_profile",
          "available_profiles",
          "profile"
        ],
        "title": "LLMModelConfigurationResponse",
        "description": "Response describing the active profile and available options."
      },
      "LLMModelDefinitionSchema": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "auto_download": {
            "type": "boolean",
            "title": "Auto Download",
            "default": true
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "role",
          "name",
          "provider"
        ],
        "title": "LLMModelDefinitionSchema",
        "description": "Serialised representation of a model configuration entry."
      },
      "LLMModelProfileSummary": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "models": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LLMModelDefinitionSchema"
            },
            "type": "object",
            "title": "Models"
          }
        },
        "type": "object",
        "required": [
          "name",
          "models"
        ],
        "title": "LLMModelProfileSummary",
        "description": "Summary of models defined under a profile."
      },
      "LLMModelProvisionReportResponse": {
        "properties": {
          "statuses": {
            "items": {
              "$ref": "#/components/schemas/LLMModelProvisionStatusResponse"
            },
            "type": "array",
            "title": "Statuses"
          }
        },
        "type": "object",
        "required": [
          "statuses"
        ],
        "title": "LLMModelProvisionReportResponse",
        "description": "Aggregated provisioning report returned by the API."
      },
      "LLMModelProvisionRequest": {
        "properties": {
          "roles": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Roles"
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "default": false
          }
        },
        "type": "object",
        "title": "LLMModelProvisionRequest",
        "description": "Request body for provisioning LLM models."
      },
      "LLMModelProvisionStatusResponse": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "role",
          "name",
          "provider",
          "action"
        ],
        "title": "LLMModelProvisionStatusResponse",
        "description": "Result entry returned after attempting to ensure a model."
      },
      "MemoryItem": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "response": {
            "type": "string",
            "title": "Response"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "query",
          "response"
        ],
        "title": "MemoryItem"
      },
      "PeerLoadSnapshot": {
        "properties": {
          "scheduler_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduler Id"
          },
          "queue_depth": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Queue Depth",
            "default": 0
          },
          "active_workers": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Active Workers",
            "default": 0
          },
          "concurrency": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Concurrency",
            "default": 0
          },
          "load_factor": {
            "type": "number",
            "minimum": 0.0,
            "title": "Load Factor",
            "default": 0.0
          }
        },
        "type": "object",
        "title": "PeerLoadSnapshot",
        "description": "Minimal load report shared between peer schedulers."
      },
      "PeerMessage": {
        "properties": {
          "payload": {
            "type": "string",
            "minLength": 1,
            "title": "Payload"
          }
        },
        "type": "object",
        "required": [
          "payload"
        ],
        "title": "PeerMessage",
        "description": "Payload accepted by the peer message endpoint."
      },
      "PeerRegistration": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "PeerRegistration",
        "description": "Model describing a peer registration request."
      },
      "PeerTelemetryEnvelope": {
        "properties": {
          "telemetry": {
            "items": {
              "$ref": "#/components/schemas/PeerTelemetryPayload"
            },
            "type": "array",
            "title": "Telemetry"
          }
        },
        "type": "object",
        "title": "PeerTelemetryEnvelope",
        "description": "Aggregated telemetry view returned by the peer telemetry endpoint."
      },
      "PeerTelemetryPayload": {
        "properties": {
          "scheduler_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduler Id"
          },
          "queue_depth": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Queue Depth",
            "default": 0
          },
          "active_workers": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Active Workers",
            "default": 0
          },
          "concurrency": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Concurrency",
            "default": 0
          },
          "load_factor": {
            "type": "number",
            "minimum": 0.0,
            "title": "Load Factor",
            "default": 0.0
          },
          "worker_uptime_seconds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Worker Uptime Seconds",
            "default": 0.0
          },
          "tasks_processed": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Tasks Processed",
            "default": 0
          },
          "tasks_failed": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Tasks Failed",
            "default": 0
          },
          "task_failure_rate": {
            "type": "number",
            "minimum": 0.0,
            "title": "Task Failure Rate",
            "default": 0.0
          },
          "observed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Observed At"
          },
          "source": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2048
              },
              {
                "type": "null"
              }
            ],
            "title": "Source"
          }
        },
        "type": "object",
        "title": "PeerTelemetryPayload",
        "description": "Detailed telemetry snapshot propagated between schedulers."
      },
      "RagContextRequest": {
        "properties": {
          "query": {
            "type": "string",
            "maxLength": 4000,
            "minLength": 1,
            "title": "Query"
          },
          "repositories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repositories"
          },
          "max_results": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 50.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Results"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "RagContextRequest",
        "description": "Request payload for the RAG context enrichment endpoint."
      },
      "RagContextResponse": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "focus_areas": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Focus Areas"
          },
          "references": {
            "items": {
              "$ref": "#/components/schemas/RagReferenceSchema"
            },
            "type": "array",
            "title": "References"
          }
        },
        "type": "object",
        "title": "RagContextResponse",
        "description": "Response payload for the RAG context enrichment endpoint."
      },
      "RagReferenceSchema": {
        "properties": {
          "repository": {
            "type": "string",
            "title": "Repository"
          },
          "file_path": {
            "type": "string",
            "title": "File Path"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "repository",
          "file_path",
          "summary"
        ],
        "title": "RagReferenceSchema",
        "description": "Single reference entry returned by the RAG service."
      },
      "SpeechSegmentSchema": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "estimated_duration": {
            "type": "number",
            "title": "Estimated Duration"
          },
          "pause_after": {
            "type": "number",
            "title": "Pause After"
          }
        },
        "type": "object",
        "required": [
          "text",
          "estimated_duration",
          "pause_after"
        ],
        "title": "SpeechSegmentSchema",
        "description": "Schema describing a single speech segment."
      },
      "SpeechTurnSchema": {
        "properties": {
          "turn_id": {
            "type": "string",
            "title": "Turn Id"
          },
          "text": {
            "type": "string",
            "title": "Text"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/SpeechSegmentSchema"
            },
            "type": "array",
            "title": "Segments"
          },
          "average_words_per_second": {
            "type": "number",
            "title": "Average Words Per Second"
          },
          "tempo": {
            "type": "number",
            "title": "Tempo"
          }
        },
        "type": "object",
        "required": [
          "turn_id",
          "text",
          "created_at",
          "segments",
          "average_words_per_second",
          "tempo"
        ],
        "title": "SpeechTurnSchema",
        "description": "Schema describing the structure of a conversational speech turn."
      },
      "SuggestRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "maxLength": 8000,
            "minLength": 1,
            "title": "Prompt"
          },
          "actions": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Actions"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "SuggestRequest",
        "description": "Request body for the UI suggestion endpoint."
      },
      "SuggestResponse": {
        "properties": {
          "actions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Actions"
          },
          "scores": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Scores"
          },
          "model": {
            "type": "string",
            "title": "Model"
          }
        },
        "type": "object",
        "required": [
          "actions",
          "scores",
          "model"
        ],
        "title": "SuggestResponse",
        "description": "Response model returned by the UI suggestion endpoint."
      },
      "UserRegistration": {
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 150,
            "minLength": 1,
            "title": "Username"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "UserRegistration",
        "description": "Input payload for user registration requests."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WSTicketResponse": {
        "properties": {
          "ticket": {
            "type": "string",
            "title": "Ticket"
          },
          "ttl": {
            "type": "integer",
            "title": "Ttl"
          }
        },
        "type": "object",
        "required": [
          "ticket",
          "ttl"
        ],
        "title": "WSTicketResponse"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "token"
          }
        }
      }
    }
  }
}