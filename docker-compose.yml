version: '3.8'

services:
  app:
    build: .
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - ENV=production
      - PORT=8000
      - USE_RAY_SERVE=False
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: ankane/pgvector
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mongars"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: mongars
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: mongars_db
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    volumes:
      - redisdata:/data

  mlflow:
    image: mlflow/mlflow
    ports:
      - "5000:5000"
    environment:
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI}
    volumes:
      - ./mlruns:/mlruns

  ollama:
    image: ollama/ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama

  vault:
    image: vault:1.9.2
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    ports:
      - "8200:8200"

  rayserve:
    image: rayproject/ray:latest
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      bash -c "pip install ray[serve] && ray start --head --include-dashboard false --port=8265 && python -m ray.serve.start"
    ports:
      - "8265:8265"
    deploy:
      replicas: 1
      resources:
        limits:
          cpu: "2"
          memory: "4Gi"

volumes:
  pgdata:
  redisdata:
  ollama: