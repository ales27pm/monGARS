name: Generate signing CSR

on:
  workflow_dispatch:
    inputs:
      common_name:
        description: "Common Name (CN) for the certificate subject"
        required: true
        type: string
      email:
        description: "Email address for the subject"
        required: false
        type: string
        default: ""
      organization:
        description: "Organization (O) for the subject"
        required: false
        type: string
        default: ""
      organizational_unit:
        description: "Organizational Unit (OU)"
        required: false
        type: string
        default: ""
      locality:
        description: "Locality/City (L)"
        required: false
        type: string
        default: ""
      state:
        description: "State/Province (ST)"
        required: false
        type: string
        default: ""
      country:
        description: "Two-letter country code (C)"
        required: false
        type: string
        default: "US"
      subject_alt_names:
        description: "Comma-separated SAN entries (e.g. DNS:api.example.com, URI:https://example.com)"
        required: false
        type: string
        default: ""
      key_type:
        description: "Key algorithm"
        required: false
        type: choice
        options:
          - rsa
          - ec
        default: rsa
      key_bits:
        description: "RSA key size"
        required: false
        type: choice
        options: [2048, 3072, 4096]
        default: 2048
      ec_curve:
        description: "Elliptic curve when using EC keys"
        required: false
        type: choice
        options: [prime256v1, secp384r1]
        default: prime256v1

permissions:
  contents: read
  actions: write

jobs:
  generate-csr:
    runs-on: macos-latest
    steps:
      - name: Prepare workspace
        run: |
          set -euo pipefail
          mkdir -p certs

      - name: Render subject and OpenSSL configuration
        env:
          COMMON_NAME: ${{ inputs.common_name }}
          EMAIL: ${{ inputs.email }}
          ORGANIZATION: ${{ inputs.organization }}
          ORGANIZATIONAL_UNIT: ${{ inputs.organizational_unit }}
          LOCALITY: ${{ inputs.locality }}
          STATE: ${{ inputs.state }}
          COUNTRY: ${{ inputs.country }}
          SUBJECT_ALT_NAMES: ${{ inputs.subject_alt_names }}
        run: |
          set -euo pipefail
          python <<'PY'
import os
import pathlib


def _escape_subject_value(raw: str) -> str:
    """Escape OpenSSL subject special characters."""

    replacements = {
        "\\": "\\\\",
        "/": "\\/",
        ",": "\\,",
        "+": "\\+",
        "=": "\\=",
        '"': '\\"',
        "<": "\\<",
        ">": "\\>",
        "#": "\\#",
        ";": "\\;",
    }
    return "".join(replacements.get(char, char) for char in raw)


root = pathlib.Path("certs")
root.mkdir(parents=True, exist_ok=True)

subject_fields = [("CN", os.environ["COMMON_NAME"].strip())]
field_mapping = [
    ("EMAIL", "emailAddress"),
    ("ORGANIZATION", "O"),
    ("ORGANIZATIONAL_UNIT", "OU"),
    ("LOCALITY", "L"),
    ("STATE", "ST"),
    ("COUNTRY", "C"),
]
for env_name, field_name in field_mapping:
    value = os.environ.get(env_name, "").strip()
    if value:
        subject_fields.append((field_name, value))

subject_value = "/" + "/".join(
    f"{field}={_escape_subject_value(value)}" for field, value in subject_fields
)
(root / "subject.txt").write_text(subject_value + "\n", encoding="utf-8")

san_raw = os.environ.get("SUBJECT_ALT_NAMES", "")
san_entries: list[str] = []
san_config_entries: list[str] = []
for index, item in enumerate(san_raw.split(","), start=1):
    clean = item.strip()
    if not clean:
        continue
    if ":" in clean:
        kind, value = clean.split(":", 1)
        san_entries.append(f"{kind.strip()}:{value.strip()}")
        san_config_entries.append(f"{kind.strip()}.{index} = {value.strip()}")
    else:
        san_entries.append(f"DNS:{clean}")
        san_config_entries.append(f"DNS.{index} = {clean}")

config_lines = [
    "[req]",
    "distinguished_name = req_distinguished_name",
    "prompt = no",
    "default_md = sha256",
]
if san_config_entries:
    config_lines.append("req_extensions = req_ext")
config_lines.extend(["", "[req_distinguished_name]"])
config_lines.extend(f"{field} = {value}" for field, value in subject_fields)
if san_config_entries:
    config_lines.extend(["", "[req_ext]", "subjectAltName = @req_san", "", "[req_san]"])
    config_lines.extend(san_config_entries)

(root / "openssl.cnf").write_text("\n".join(config_lines) + "\n", encoding="utf-8")
san_blob = "\n".join(san_entries)
(root / "san_entries.txt").write_text((san_blob + "\n") if san_blob else "", encoding="utf-8")
PY

      - name: Generate private key and CSR
        env:
          KEY_TYPE: ${{ inputs.key_type }}
          KEY_BITS: ${{ inputs.key_bits }}
          EC_CURVE: ${{ inputs.ec_curve }}
        run: |
          set -euo pipefail
          subject=$(cat certs/subject.txt)
          if [ "$KEY_TYPE" = "ec" ]; then
            openssl ecparam -name "$EC_CURVE" -genkey -noout -out certs/signing.key
          else
            openssl genrsa -out certs/signing.key "$KEY_BITS"
          fi
          chmod 600 certs/signing.key

          if [ -s certs/san_entries.txt ]; then
            extensions_args=(-extensions req_ext)
          else
            extensions_args=()
          fi

          openssl req -new \
            -key certs/signing.key \
            -subj "$subject" \
            -config certs/openssl.cnf \
            "${extensions_args[@]}" \
            -out certs/signing.csr

      - name: Produce verification metadata
        run: |
          set -euo pipefail
          openssl req -in certs/signing.csr -noout -text > certs/signing.csr.txt
          shasum -a 256 certs/signing.key > certs/signing.key.sha256
          shasum -a 256 certs/signing.csr > certs/signing.csr.sha256

      - name: Publish summary
        env:
          KEY_TYPE: ${{ inputs.key_type }}
          KEY_BITS: ${{ inputs.key_bits }}
          EC_CURVE: ${{ inputs.ec_curve }}
          SUBJECT_ALT_NAMES: ${{ inputs.subject_alt_names }}
        run: |
          set -euo pipefail
          python <<'PY'
import os
import pathlib

san_path = pathlib.Path("certs") / "san_summary.md"
entries = []
for raw in os.environ.get("SUBJECT_ALT_NAMES", "").split(","):
    item = raw.strip()
    if item:
        entries.append(f"- {item}")
san_path.write_text("\n".join(entries) + ("\n" if entries else ""), encoding="utf-8")
PY
          subject=$(openssl req -in certs/signing.csr -noout -subject | sed 's/^subject= //')
          fingerprint=$(openssl req -in certs/signing.csr -noout -pubkey | openssl pkey -pubin -outform DER | openssl dgst -sha256 | sed 's/^.*= //')
          {
            echo "### Signing CSR generated"
            echo
            echo "- **Subject:** \`$subject\`"
            echo "- **Key algorithm:** ${KEY_TYPE^^}"
          } >> "$GITHUB_STEP_SUMMARY"
          if [ "$KEY_TYPE" = "rsa" ]; then
            echo "- **Key size:** ${KEY_BITS} bits" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- **Elliptic curve:** ${EC_CURVE}" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -s certs/san_summary.md ]; then
            echo "- **Subject Alternative Names:**" >> "$GITHUB_STEP_SUMMARY"
            cat certs/san_summary.md >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "- **Public key SHA-256:** \`$fingerprint\`" >> "$GITHUB_STEP_SUMMARY"

      - name: Upload CSR and Private Key as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signing-csr-bundle
          path: |
            certs/signing.csr
            certs/signing.key
            certs/signing.csr.txt
            certs/signing.csr.sha256
            certs/signing.key.sha256
            certs/openssl.cnf
          retention-days: 3
